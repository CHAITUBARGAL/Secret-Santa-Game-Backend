"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateAssignments = void 0;
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
// Helper function to shuffle an array using the Fisherâ€“Yates algorithm
function shuffle(array) {
  for (var i = array.length - 1; i > 0; i--) {
    var j = Math.floor(Math.random() * (i + 1));
    var _ref = [array[j], array[i]];
    array[i] = _ref[0];
    array[j] = _ref[1];
  }
  return array;
}
var generateAssignments = exports.generateAssignments = function generateAssignments(employees, previousAssignments) {
  var maxAttempts = 1000;
  var assignments = [];
  for (var attempt = 0; attempt < maxAttempts; attempt++) {
    var shuffled = shuffle(_toConsumableArray(employees));
    var valid = true;
    assignments = [];
    for (var i = 0; i < employees.length; i++) {
      var giver = employees[i];
      var receiver = shuffled[i];
      // Constraint 1: An employee cannot be assigned to themselves
      if (giver.Employee_EmailID === receiver.Employee_EmailID) {
        valid = false;
        break;
      }
      // Constraint 2: Avoid previous year's assignment if provided
      if (previousAssignments[giver.Employee_EmailID] && previousAssignments[giver.Employee_EmailID] === receiver.Employee_EmailID) {
        valid = false;
        break;
      }
      assignments.push({
        employee: giver,
        secretChild: receiver
      });
    }
    if (valid) {
      return assignments;
    }
  }
  throw new Error('Unable to generate valid assignments after many attempts');
};
